#!/usr/bin/env python3

import argparse
import traceback
from fwlib import Context

def cycle_start(host, port):
    """
    Send a cycle start command to the CNC machine.
    
    Args:
        host (str): The CNC host IP address
        port (int): The CNC port number
    """
    print(f"Attempting to connect to CNC at {host}:{port}")
    try:
        # Create a connection to the CNC
        with Context(host=host, port=port) as cnc:
            print("Successfully connected to CNC")
            
            # Try to read CNC ID for connection verification
            try:
                cnc_id = cnc.read_id()
                print(f"Connected to CNC with ID: {cnc_id}")
            except Exception as e:
                print(f"Warning: Could not read CNC ID: {e}")
            
            # Check CNC status for information only
            status = cnc.read_status()
            
            # Print status in a more readable format
            print("\nCNC Status Information:")
            print("----------------------")
            print(f"Operation Modes:")
            print(f"  MDI Mode:      {'Yes' if status.get('mdi', False) else 'No'}")
            print(f"  JOG Mode:      {'Yes' if status.get('jog', False) else 'No'}")
            print(f"  AUTO Mode:     {'Yes' if status.get('auto', False) else 'No'}")
            print(f"  Edit Mode:     {'Yes' if status.get('edit', False) else 'No'}")
            print(f"  T/M Mode:      {status.get('tmmode', 0)}")
            print(f"  Handle Retrace: {'Yes' if status.get('hdck', False) else 'No'}")
            print(f"Machine Status:")
            print(f"  Running:       {'Yes' if status.get('run', False) else 'No'}")
            print(f"  Motion:        {'Yes' if status.get('motion', False) else 'No'}")
            print(f"  M/S/T/B:       {'Yes' if status.get('mstb', False) else 'No'}")
            print(f"  Emergency:     {'Yes' if status.get('emergency', False) else 'No'}")
            print(f"  Alarm:         {'Yes' if status.get('alarm', False) else 'No'}")
            print("----------------------")
            
            # Send cycle start command using the new method
            print("Sending cycle start command...")
            cnc.cycle_start()
            print("Successfully sent cycle start command")
                
    except ConnectionError as e:
        print(f"Connection error: {e}")
    except Exception as e:
        print(f"Unexpected error: {type(e).__name__}: {e}")
        traceback.print_exc()

# Error code mapping for better error messages
ERROR_MESSAGES = {
    # Negative error codes (communication issues)
    -17: "Protocol error (EW_PROTOCOL)",
    -16: "Socket error (EW_SOCKET)",
    -15: "DLL not exist error (EW_NODLL)",
    -14: "Error in API library initial value file (EW_INIERR)",
    -13: "Low temperature alarm of intelligent terminal (EW_ITLOW)",
    -12: "High temperature alarm of intelligent terminal (EW_ITHIGHT)",
    -11: "Bus error (EW_BUS)",
    -10: "System error (EW_SYSTEM2)",
    -9: "HSSB communication error (EW_HSSB)",
    -8: "Windows library handle error (EW_HANDLE)",
    -7: "CNC/PMC version mismatch (EW_VERSION)",
    -6: "Abnormal error (EW_UNEXP)",
    -5: "System error (EW_SYSTEM)",
    -4: "Shared RAM parity error (EW_PARITY)",
    -3: "EMM386 or MMCSYS install error (EW_MMCSYS)",
    -2: "Reset or stop occurred error (EW_RESET)",
    -1: "Busy error (EW_BUSY)",
    
    # Positive error codes
    0: "No problem (EW_OK)",
    1: "Command prepare error (EW_FUNC) or PMC not exist (EW_NOPMC)",
    2: "Data block length error (EW_LENGTH)",
    3: "Data number error (EW_NUMBER) or Address range error (EW_RANGE)",
    4: "Data attribute error (EW_ATTRIB) or Data type error (EW_TYPE)",
    5: "Data error (EW_DATA)",
    6: "No option error (EW_NOOPT)",
    7: "Write protect error (EW_PROT)",
    8: "Memory overflow error (EW_OVRFLOW)",
    9: "CNC parameter not correct error (EW_PARAM)",
    10: "Buffer error (EW_BUFFER)",
    11: "Path error (EW_PATH)",
    12: "CNC mode error (EW_MODE)",
    13: "Execution rejected error (EW_REJECT)",
    14: "Data server error (EW_DTSRVR)",
    15: "Alarm has been occurred (EW_ALARM)",
    16: "CNC is not running (EW_STOP)",
    17: "Protection data error (EW_PASSWD)",
    18: "Error generated by PMC (EW_PMC)",
    19: "PMC handle error (EW_PMCHANDLE)",
    20: "Overwrite stop in program read (EW_RD_OVWSTP)",
    21: "Reset interrupt in program read (EW_RD_RSTFIN)"
}

if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Send cycle start command to FANUC CNC')
    parser.add_argument('--host', default='172.18.0.4', help='CNC IP address')
    parser.add_argument('--port', type=int, default=8193, help='CNC port')
    args = parser.parse_args()
    
    # Send the cycle start command
    cycle_start(args.host, args.port) 