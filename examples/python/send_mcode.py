#!/usr/bin/env python3

import argparse
import traceback
from fwlib import Context

# Error code mapping for better error messages
ERROR_MESSAGES = {
    # Negative error codes (communication issues)
    -17: "Protocol error (EW_PROTOCOL)",
    -16: "Socket error (EW_SOCKET)",
    -15: "DLL not exist error (EW_NODLL)",
    -14: "Error in API library initial value file (EW_INIERR)",
    -13: "Low temperature alarm of intelligent terminal (EW_ITLOW)",
    -12: "High temperature alarm of intelligent terminal (EW_ITHIGHT)",
    -11: "Bus error (EW_BUS)",
    -10: "System error (EW_SYSTEM2)",
    -9: "HSSB communication error (EW_HSSB)",
    -8: "Windows library handle error (EW_HANDLE)",
    -7: "CNC/PMC version mismatch (EW_VERSION)",
    -6: "Abnormal error (EW_UNEXP)",
    -5: "System error (EW_SYSTEM)",
    -4: "Shared RAM parity error (EW_PARITY)",
    -3: "EMM386 or MMCSYS install error (EW_MMCSYS)",
    -2: "Reset or stop occurred error (EW_RESET)",
    -1: "Busy error (EW_BUSY)",
    
    # Positive error codes
    0: "No problem (EW_OK)",
    1: "Command prepare error (EW_FUNC) or PMC not exist (EW_NOPMC)",
    2: "Data block length error (EW_LENGTH)",
    3: "Data number error (EW_NUMBER) or Address range error (EW_RANGE)",
    4: "Data attribute error (EW_ATTRIB) or Data type error (EW_TYPE)",
    5: "Data error (EW_DATA)",
    6: "No option error (EW_NOOPT)",
    7: "Write protect error (EW_PROT)",
    8: "Memory overflow error (EW_OVRFLOW)",
    9: "CNC parameter not correct error (EW_PARAM)",
    10: "Buffer error (EW_BUFFER)",
    11: "Path error (EW_PATH)",
    12: "CNC mode error (EW_MODE)",
    13: "Execution rejected error (EW_REJECT)",
    14: "Data server error (EW_DTSRVR)",
    15: "Alarm has been occurred (EW_ALARM)",
    16: "CNC is not running (EW_STOP)",
    17: "Protection data error (EW_PASSWD)",
    18: "Error generated by PMC (EW_PMC)",
    19: "PMC handle error (EW_PMCHANDLE)",
    20: "Overwrite stop in program read (EW_RD_OVWSTP)",
    21: "Reset interrupt in program read (EW_RD_RSTFIN)"
}

def check_cnc_status(cnc):
    """
    Check the CNC status and return a tuple (can_send, error_message).
    
    Args:
        cnc (Context): The CNC context object
        
    Returns:
        tuple: (bool, str) indicating if M-code can be sent and any error message
    """
    try:
        status = cnc.read_status()
        
        # Check emergency stop
        if status.get('emergency', False):
            return False, "CNC is in emergency stop state"
            
        # Check for alarms
        if status.get('alarm', False):
            return False, "CNC has active alarms"
            
        # Check if CNC is running
        if status.get('run', False):
            return False, "CNC is currently running a program"
            
        # Check if M/S/T/B commands are being executed
        if status.get('mstb', False):
            return False, "CNC is executing M/S/T/B commands"
            
        # Check if in MDI mode
        if not status.get('mdi', False):
            return False, "CNC is not in MDI mode"
            
        return True, None
        
    except Exception as e:
        return False, f"Failed to read CNC status: {str(e)}"

def parse_mcode(mcode):
    """
    Parse the M-code string into a numeric value.
    
    Args:
        mcode (str or int): The M-code to parse (e.g., "M71" or "71" or 71)
        
    Returns:
        int: The numeric M-code value or None if invalid
    """
    # If mcode is already a number, use it directly
    if isinstance(mcode, int):
        return mcode
        
    # Remove any 'M' prefix and convert to integer
    mcode_str = str(mcode).strip().upper()
    if mcode_str.startswith('M'):
        mcode_str = mcode_str[1:]
        
    try:
        return int(mcode_str)
    except ValueError:
        return None

def send_mcode(host, port, mcode, cycle_start_after=False):
    """
    Send an M-code to the CNC machine using MDI command.
    
    Args:
        host (str): The CNC host IP address
        port (int): The CNC port number
        mcode (str): The M-code to send (e.g., "M71" or "71")
        cycle_start_after (bool): Whether to send cycle start command after sending the M-code
    """
    print(f"Attempting to connect to CNC at {host}:{port}")
    try:
        # Create a connection to the CNC
        with Context(host=host, port=port) as cnc:
            print("Successfully connected to CNC")
            
            # Try to read CNC ID for connection verification
            try:
                cnc_id = cnc.read_id()
                print(f"Connected to CNC with ID: {cnc_id}")
            except Exception as e:
                print(f"Warning: Could not read CNC ID: {e}")
            
            # Check CNC status for information only
            status = cnc.read_status()
            
            # Print status in a more readable format
            print("\nCNC Status Information:")
            print("----------------------")
            print(f"Operation Modes:")
            print(f"  MDI Mode:      {'Yes' if status.get('mdi', False) else 'No'}")
            print(f"  JOG Mode:      {'Yes' if status.get('jog', False) else 'No'}")
            print(f"  AUTO Mode:     {'Yes' if status.get('auto', False) else 'No'}")
            print(f"  Edit Mode:     {'Yes' if status.get('edit', False) else 'No'}")
            print(f"  T/M Mode:      {status.get('tmmode', 0)}")
            print(f"  Handle Retrace: {'Yes' if status.get('hdck', False) else 'No'}")
            print(f"Machine Status:")
            print(f"  Running:       {'Yes' if status.get('run', False) else 'No'}")
            print(f"  Motion:        {'Yes' if status.get('motion', False) else 'No'}")
            print(f"  M/S/T/B:       {'Yes' if status.get('mstb', False) else 'No'}")
            print(f"  Emergency:     {'Yes' if status.get('emergency', False) else 'No'}")
            print(f"  Alarm:         {'Yes' if status.get('alarm', False) else 'No'}")
            print("----------------------")
            
            # Parse the M-code
            mcode_num = parse_mcode(mcode)
            if mcode_num is None:
                print(f"Invalid M-code format: {mcode}. Expected format: 'M71' or '71'")
                return
                
            # Format the M-code command - send just the number without 'M' prefix
            command = f"\nM{mcode_num}\n%"
            print(f"Sending command: {command}")
            
            # Send the MDI command without protection checks
            ret = cnc.wrmdiprog(len(command), command)
            print(f"Command sent with return code: {ret}")
            
            if ret != 0:  # EW_OK is 0
                print(f"Failed to send M-code: Error code {ret}")
                if ret in ERROR_MESSAGES:
                    print(f"Error details: {ERROR_MESSAGES[ret]}")
                else:
                    print(f"Unknown error code: {ret}")
                    
                # Provide troubleshooting suggestions based on error code
                if ret == 5 or ret == 12:
                    print("\nTroubleshooting: The CNC may not be in MDI mode.")
                    print("Try manually switching the CNC to MDI mode before sending commands.")
                elif ret == 17 or ret == 18:
                    print("\nTroubleshooting: The CNC is in an alarm or emergency stop state.")
                    print("Check the CNC control panel for alarms and clear them before trying again.")
                elif ret == 19 or ret == 20:
                    print("\nTroubleshooting: The CNC is in automatic or manual operation mode.")
                    print("Switch to MDI mode before sending commands.")
                elif ret == -1:
                    print("\nTroubleshooting: The CNC is busy processing another command.")
                    print("Wait a moment and try again.")
                elif ret == 6:
                    print("\nTroubleshooting: The required option for this operation is not available.")
                    print("Check if your CNC has the necessary option enabled for MDI commands.")
                else:
                    print("\nTroubleshooting: Check the CNC status and ensure it's ready to accept commands.")
                    print("Verify that the machine is powered on, not in emergency stop, and has no active alarms.")
            else:
                print(f"Successfully sent M{mcode_num}")
                
                # If cycle_start_after is True, send cycle start command
                if cycle_start_after:
                    print("Sending cycle start command...")
                    try:
                        cnc.cycle_start()
                        print("Successfully sent cycle start command")
                    except Exception as e:
                        print(f"Failed to send cycle start command: {e}")
                
    except ConnectionError as e:
        print(f"Connection error: {e}")
    except Exception as e:
        print(f"Unexpected error: {type(e).__name__}: {e}")
        traceback.print_exc()

def send_mcode_jog(host, port, mcode, cycle_start_after=False):
    """
    Send an M-code to the CNC machine using JOG mode command.
    
    Args:
        host (str): The CNC host IP address
        port (int): The CNC port number
        mcode (str): The M-code to send (e.g., "M71" or "71")
        cycle_start_after (bool): Whether to send cycle start command after sending the M-code
    """
    print(f"Attempting to connect to CNC at {host}:{port}")
    try:
        # Create a connection to the CNC
        with Context(host=host, port=port) as cnc:
            print("Successfully connected to CNC")
            
            # Try to read CNC ID for connection verification
            try:
                cnc_id = cnc.read_id()
                print(f"Connected to CNC with ID: {cnc_id}")
            except Exception as e:
                print(f"Warning: Could not read CNC ID: {e}")
            
            # Check CNC status for information only
            status = cnc.read_status()
            
            # Print status in a more readable format
            print("\nCNC Status Information:")
            print("----------------------")
            print(f"Operation Modes:")
            print(f"  MDI Mode:      {'Yes' if status.get('mdi', False) else 'No'}")
            print(f"  JOG Mode:      {'Yes' if status.get('jog', False) else 'No'}")
            print(f"  AUTO Mode:     {'Yes' if status.get('auto', False) else 'No'}")
            print(f"  Edit Mode:     {'Yes' if status.get('edit', False) else 'No'}")
            print(f"  T/M Mode:      {status.get('tmmode', 0)}")
            print(f"  Handle Retrace: {'Yes' if status.get('hdck', False) else 'No'}")
            print(f"Machine Status:")
            print(f"  Running:       {'Yes' if status.get('run', False) else 'No'}")
            print(f"  Motion:        {'Yes' if status.get('motion', False) else 'No'}")
            print(f"  M/S/T/B:       {'Yes' if status.get('mstb', False) else 'No'}")
            print(f"  Emergency:     {'Yes' if status.get('emergency', False) else 'No'}")
            print(f"  Alarm:         {'Yes' if status.get('alarm', False) else 'No'}")
            print("----------------------")
            
            # Parse the M-code
            mcode_num = parse_mcode(mcode)
            if mcode_num is None:
                print(f"Invalid M-code format: {mcode}. Expected format: 'M71' or '71'")
                return
                
            # Format the M-code command
            command = f"M{mcode_num}"
            print(f"Sending JOG command: {command}")
            
            # Send the JOG command
            ret = cnc.wrjogmdi(command)
            print(f"Command sent with return code: {ret}")
            
            if ret != 0:  # EW_OK is 0
                print(f"Failed to send M-code: Error code {ret}")
                if ret in ERROR_MESSAGES:
                    print(f"Error details: {ERROR_MESSAGES[ret]}")
                else:
                    print(f"Unknown error code: {ret}")
                    
            else:
                print(f"Successfully sent M{mcode_num}")
                
                # If cycle_start_after is True, send cycle start command
                if cycle_start_after:
                    print("Sending cycle start command...")
                    try:
                        cnc.cycle_start()
                        print("Successfully sent cycle start command")
                    except Exception as e:
                        print(f"Failed to send cycle start command: {e}")
                
    except ConnectionError as e:
        print(f"Connection error: {e}")
    except Exception as e:
        print(f"Unexpected error: {type(e).__name__}: {e}")
        traceback.print_exc()

def set_cnc_mode(cnc, mode):
    """
    Set the CNC operation mode.
    
    Args:
        cnc (Context): The CNC context object
        mode (str): The operation mode to set ('mdi', 'auto', or 'jog')
        
    Returns:
        tuple: (bool, str) indicating success/failure and any error message
    """
    if mode not in ['mdi', 'auto', 'jog']:
        return False, "Invalid mode. Must be 'mdi', 'auto', or 'jog'"
    
    try:
        success, error = check_cnc_status(cnc)
        if not success:
            return False, error
        
        if mode == 'mdi':
            success, error = set_cnc_mode(cnc, 'auto')
            if not success:
                return False, error
            success, error = set_cnc_mode(cnc, 'jog')
            if not success:
                return False, error
            return True, None
        elif mode == 'auto':
            cnc.set_mode('auto')
            return True, None
        elif mode == 'jog':
            cnc.set_mode('jog')
            return True, None
    except Exception as e:
        return False, f"Failed to set CNC mode: {str(e)}"

if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Send M-code to FANUC CNC')
    parser.add_argument('--host', default='172.18.0.4', help='CNC IP address')
    parser.add_argument('--port', type=int, default=8193, help='CNC port')
    parser.add_argument('--mcode', default='71', help='M-code to send (e.g., "M71" or "71")')
    parser.add_argument('--mode', choices=['mdi', 'jog'], default='mdi', help='Operation mode (MDI or JOG)')
    parser.add_argument('--cycle-start', action='store_true', help='Send cycle start command after sending M-code')
    args = parser.parse_args()
    
    # Send the specified M-code in the chosen mode
    if args.mode == 'mdi':
        send_mcode(args.host, args.port, args.mcode, args.cycle_start)
    else:
        send_mcode_jog(args.host, args.port, args.mcode, args.cycle_start)